Algorithms and Problem Solving patterns:
- - - - - - - - - - - - - - - - - - - -

// Algorithms: A process or set of steps to solve a particular problem.

// Problem solving steps:
- Understand the problem.
- Explore concrete examples.
- Break it down.
- Solve/Simplify.
- Look back and refactor.

// Understanding the problem:
1. Can I restate the problem in my own words?
2. What are the inputs that go into the problem?
3. What are the outputs that should come from the solution to the problem?
4. Can the output be determined from the inputs? Do I have enough information to solve the problem?
5. How should I label the important pieces of data that are a part of the problem?

// Break it down: Write down the steps you need to take.

- - - - - - - - - - - - - -
// Problem solving patterns:
- - - - - - - - - - - - - - 

// Frequency Counters:
This pattern uses objects or sets to collect values/frequencies of values. 
This can often avoid the need for nested loops or O(N^2) 
operations with arrays or strings.

// Multiple Pointers:
Creating pointers or values that correspond to an index or position and move towards
the beginning, end or middle based on a certain condition. 
Very efficient for solving problems with minimal space complexity as well.

// Sliding Window:
This pattern involves creating a window which can either be an array or 
number from one position to another.
Depending on a certain condition, the window either increases or closes
(and a new window is created). Very useful for keeping track of a subset of
data in an array/string etc.

// Divide and Conquer:
This pattern involves dividing a data set into smaller chunks
and then repeating a process with a subset of data.
This pattern can tremendously decrease time complexity.